#!/usr/bin/env python3
#
# listvols:  Show all volumes, along with any cluster/worker mappings if any
#
# ToDo:  region as command arg
#

import sys
import json
import urllib.request
from pprint import pprint as pp
from os.path import expanduser
import SoftLayer

home = expanduser("~")
bmxconfig = home + "/.bluemix/config.json"

with open(bmxconfig) as f:
    data = json.load(f)

token= data['IAMToken']

Bmgr = SoftLayer.BlockStorageManager(SoftLayer.Client())

def get_regions():
      regions = []
      hdrs={'Content-Type': 'application/json', 'Authorization' : token }
      try:
           request = urllib.request.Request(url="https://containers.bluemix.net/v1/regions", headers=hdrs)
           contents = json.load(urllib.request.urlopen(request))
      except:
           print ("Can't access Cloud API.  Are you logged in?  ")
           sys.exit(-1)
      for c in contents['regions']:
          regions.append(c['name'])
      return regions

def get_volume_access (volid):
      acls = []
      lba = Bmgr.get_block_volume_access_list(volid)
      for a in lba['allowedIpAddresses']:
          acls.append (a['ipAddress'])
      return acls

def get_clusters(regions):
     cmap = []
     print ("\nGetting clusters for region: ", end='', flush=True)
     for r in regions:
          try:
              print ("%s " % (r),  end='', flush=True)
              headers={'Content-Type': 'application/json', 'X-Region' : r, 'Authorization' : token }
              request = urllib.request.Request(url="https://containers.bluemix.net/v1/clusters", headers=headers)
              contents = json.load(urllib.request.urlopen(request))
              for c in contents:
                   cls = {}
                   cls['name'] = c['name']
                   cls['region'] = r
                   cmap.append(cls)
          except:
              print ("Can't access Cloud API.  Are you logged in?  ")
              sys.exit(-1)
     # pp (cmap)
     print ("\n")
     return (cmap)

def get_workers(cluster):
      workers = []
      try:
          headers={'Content-Type': 'application/json', 'X-Region' : cluster['region'], 'Authorization' : token }
          request = urllib.request.Request(url="https://containers.bluemix.net/v1/clusters/" + cluster['name'] + "/workers" , headers=headers)
          contents = json.load(urllib.request.urlopen(request))
      except:
          print ("Can't access workers for cluster: ", cluster['name'])
          return ""
      for c in contents:
          workers.append (c)
      return (workers)


################################################

if len(sys.argv) > 1:
     regions = sys.argv[1:]
else:
     regions = get_regions()


clusters = {}
for i in get_clusters(regions):
        clusters[i['name']] = {}
        clusters[i['name']].update({'region' : i['region']})
        clusters[i['name']].update({'workers': get_workers(i)})

# pp (clusters)

hosts = {}
for c in clusters:
    for w in clusters[c]['workers']:
        hosts [w['privateIP']] = { 'region': clusters[c]['region'], 'cluster' : c, 'worker' : w['id'] , 'location': w['location'] }


result = Bmgr.list_block_volumes(mask='billingItem.orderItem.order')
print ("Order             VolID             Size            HostIPaddr           Region          Cluster                Worker               Location")
for i in result:
    if 'billingItem' in i:
         ips = get_volume_access(i['id'])
         for ip in ips:
              if ip in hosts:
                    print ("%s         %s          %s            %s          %s         %s            %s            %s" % 
                     (i['billingItem']['orderItem']['order']['id'], i['id'], 
                      i['capacityGb'], ip, hosts[ip]['region'], hosts[ip]['cluster'], 
                      hosts[ip]['worker'], hosts[ip]['location']))
              else:
                    print ("%s         %s          %s            %s          %s            %s" % 
                     (i['billingItem']['orderItem']['order']['id'], i['id'], i['capacityGb'], ip, "", ""))
